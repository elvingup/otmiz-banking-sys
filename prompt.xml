<input>
    <info>
        <info>
            a tag rag se refere à técnica RAG (Retrieval-Augmented Generation)
        </info>
        <info>
            a tag cot se refere a Chain-of-Thought. 
        </info>
        <info>
            a tag reference se refere a referência, que é a relação estabelecida entre um signo linguístico e o objeto ao qual ele se refere conforme um determinado contexto. Essa relação pode ser direta ou indireta, concreta ou abstrata, e varia de acordo com a natureza do signo e do referente. Características da referência: § intencionalidade: a referência pressupõe a intenção de um falante ou escritor em designar algo específico; § contextualidade: o significado de um signo e sua referência podem variar de acordo com o contexto em que são utilizados; § arbitrariedade: a relação entre um signo e seu referente é, em grande parte, arbitrária e culturalmente determinada; § ambiguidade: um mesmo signo pode ter diferentes referências em diferentes contextos ou para diferentes pessoas. Tipos de referência: o signo se refere a um objeto ou entidade existente no mundo real; o signo se refere a um conceito abstrato, uma propriedade ou uma relação entre objetos; o signo depende do contexto situacional para determinar sua referência; o signo se refere a um elemento mencionado anteriormente no texto. A referência é um conceito central para a semântica e a pragmática, e sua exploração permite uma análise mais profunda da linguagem e do pensamento humano.
        </info>
        <info>
            a tag bizz se refere à lógica de negócio.
        </info>
        <info>
            a tag do-not se refere a prompt negativo: então, evite fazer o que está determinado na tag do-not
        </info>
    </info>

    <config>
        <tryon>
            <few-shot>
                class Conta:
                    def __init__(self, numero, titular, saldo=0):
                        self.numero = numero
                        self.titular = titular
                        self.saldo = saldo
                        self.extrato = []

                    def sacar(self, valor):
                        if valor > self.saldo:
                            print("Saldo insuficiente.")
                        else:
                            self.saldo -= valor
                            self.extrato.append(f"Saque: R$ {valor:.2f}")

                    def depositar(self, valor):
                        if valor > 0:
                            self.saldo += valor
                            self.extrato.append(f"Depósito: R$ {valor:.2f}")
                        else:
                            print("Valor inválido. O valor do depósito deve ser positivo.")

                    def transferir(self, conta_destino, valor):
                        if valor > self.saldo:
                            print("Saldo insuficiente.")
                        else:
                            self.saldo -= valor
                            conta_destino.saldo += valor
                            self.extrato.append(f"Transferência: R$ {valor:.2f} para {conta_destino.titular}")
                            conta_destino.extrato.append(f"Recebido: R$ {valor:.2f} de {self.titular}")

                    def consultar_extrato(self):
                        print("\n================ EXTRATO ================")
                        for transacao in self.extrato:
                            print(transacao)
                        print(f"\nSaldo: R$ {self.saldo:.2f}")
                        print("==========================================")


                # Criando contas
                conta1 = Conta(123, "João", 1000)
                conta2 = Conta(456, "Maria")

                # Realizando operações
                conta1.sacar(500)
                conta1.depositar(200)
                conta2.transferir(conta1, 300)

                # Consultando extrato
                conta1.consultar_extrato()
                conta2.consultar_extrato()
            
            </few-shot>

            <few->
                import textwrap
                
                def menu():
                    menu = """\n
                    ================ MENU ================
                    [d]\tDepositar
                    [s]\tSacar
                    [e]\tExtrato
                    [nc]\tNova conta
                    [lc]\tListar contas
                    [nu]\tNovo usuário
                    [q]\tSair
                    => """
                    return input(textwrap.dedent(menu))
                
                
                def depositar(saldo, valor, extrato, /):
                    if valor > 0:
                        saldo += valor
                        extrato += f"Depósito:\tR$ {valor:.2f}\n"
                        print("\n=== Depósito realizado com sucesso! ===")
                    else:
                        print("\n@@@ Operação falhou! O valor informado é inválido. @@@")
                
                    return saldo, extrato
                
                
                def sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):
                    excedeu_saldo = valor > saldo
                    excedeu_limite = valor > limite
                    excedeu_saques = numero_saques >= limite_saques
                
                    if excedeu_saldo:
                        print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")
                
                    elif excedeu_limite:
                        print("\n@@@ Operação falhou! O valor do saque excede o limite. @@@")
                
                    elif excedeu_saques:
                        print("\n@@@ Operação falhou! Número máximo de saques excedido. @@@")
                
                    elif valor > 0:
                        saldo -= valor
                        extrato += f"Saque:\t\tR$ {valor:.2f}\n"
                        numero_saques += 1
                        print("\n=== Saque realizado com sucesso! ===")
                
                    else:
                        print("\n@@@ Operação falhou! O valor informado é inválido. @@@")
                
                    return saldo, extrato
                
                
                def exibir_extrato(saldo, /, *, extrato):
                    print("\n================ EXTRATO ================")
                    print("Não foram realizadas movimentações." if not extrato else extrato)
                    print(f"\nSaldo:\t\tR$ {saldo:.2f}")
                    print("==========================================")
                
                
                def criar_usuario(usuarios):
                    cpf = input("Informe o CPF (somente número): ")
                    usuario = filtrar_usuario(cpf, usuarios)
                
                    if usuario:
                        print("\n@@@ Já existe usuário com esse CPF! @@@")
                        return
                
                    nome = input("Informe o nome completo: ")
                    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
                    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")
                
                    usuarios.append({"nome": nome, "data_nascimento": data_nascimento, "cpf": cpf, "endereco": endereco})
                
                    print("=== Usuário criado com sucesso! ===")
                
                
                def filtrar_usuario(cpf, usuarios):
                    usuarios_filtrados = [usuario for usuario in usuarios if usuario["cpf"] == cpf]
                    return usuarios_filtrados[0] if usuarios_filtrados else None
                
                
                def criar_conta(agencia, numero_conta, usuarios):
                    cpf = input("Informe o CPF do usuário: ")
                    usuario = filtrar_usuario(cpf, usuarios)
                
                    if usuario:
                        print("\n=== Conta criada com sucesso! ===")
                        return {"agencia": agencia, "numero_conta": numero_conta, "usuario": usuario}
                
                    print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")
                
                
                def listar_contas(contas):
                    for conta in contas:
                        linha = f"""\
                            Agência:\t{conta['agencia']}
                            C/C:\t\t{conta['numero_conta']}
                            Titular:\t{conta['usuario']['nome']}
                        """
                        print("=" * 100)
                        print(textwrap.dedent(linha))
                
                
                def main():
                    LIMITE_SAQUES = 3
                    AGENCIA = "0001"
                
                    saldo = 0
                    limite = 500
                    extrato = ""
                    numero_saques = 0
                    usuarios = []
                    contas = []
                
                    while True:
                        opcao = menu()
                
                        if opcao == "d":
                            valor = float(input("Informe o valor do depósito: "))
                
                            saldo, extrato = depositar(saldo, valor, extrato)
                
                        elif opcao == "s":
                            valor = float(input("Informe o valor do saque: "))
                
                            saldo, extrato = sacar(
                                saldo=saldo,
                                valor=valor,
                                extrato=extrato,
                                limite=limite,
                                numero_saques=numero_saques,
                                limite_saques=LIMITE_SAQUES,
                            )
                
                        elif opcao == "e":
                            exibir_extrato(saldo, extrato=extrato)
                
                        elif opcao == "nu":
                            criar_usuario(usuarios)
                
                        elif opcao == "nc":
                            numero_conta = len(contas) + 1
                            conta = criar_conta(AGENCIA, numero_conta, usuarios)
                
                            if conta:
                                contas.append(conta)
                
                        elif opcao == "lc":
                            listar_contas(contas)
                
                        elif opcao == "q":
                            break
                
                        else:
                            print("Operação inválida, por favor selecione novamente a operação desejada.")
                
                
                main()

            </few->

            <rag>
            https://www.python.org/doc/
            </rag>

            <rag>
            https://github.com/digitalinnovationone/trilha-python-dio/blob/main/00%20-%20Fundamentos/desafio.py
            </rag>
        </tryon>
    </config>

    <requirements>
        
        <bizz>
            
            <to-do>
                refatorar o código dentro da tag code[obs='precisa refatorar']
            </to-do>

            <to-do>
                o valor na conta corrente é do tipo do float. 
                a exibição do extrato precisa ser do tipo string 
                portanto, precisa converter o float para string a fim de exibir o extrato 
            </to-do>

        </bizz>

        <code obs='precisa refatorar'>
            menu = """
            
            [d] Depositar
            [s] Sacar
            [e] Extrato
            [q] Sair
            
            => """
            
            saldo = 0
            limite = 500
            extrato = ""
            numero_saques = 0
            LIMITE_SAQUES = 3
            
            while True:
            
                opcao = input(menu)
            
                if opcao == "d":
                    valor = float(input("Informe o valor do depósito: "))
            
                    if valor > 0:
                        saldo += valor
                        extrato += f"Depósito: R$ {valor:.2f}\n"
            
                    else:
                        print("Operação falhou! O valor informado é inválido.")
            
                elif opcao == "s":
                    valor = float(input("Informe o valor do saque: "))
            
                    excedeu_saldo = valor > saldo
            
                    excedeu_limite = valor > limite
            
                    excedeu_saques = numero_saques >= LIMITE_SAQUES
            
                    if excedeu_saldo:
                        print("Operação falhou! Você não tem saldo suficiente.")
            
                    elif excedeu_limite:
                        print("Operação falhou! O valor do saque excede o limite.")
            
                    elif excedeu_saques:
                        print("Operação falhou! Número máximo de saques excedido.")
            
                    elif valor > 0:
                        saldo -= valor
                        extrato += f"Saque: R$ {valor:.2f}\n"
                        numero_saques += 1
            
                    else:
                        print("Operação falhou! O valor informado é inválido.")
            
                elif opcao == "e":
                    print("\n================ EXTRATO ================")
                    print("Não foram realizadas movimentações." if not extrato else extrato)
                    print(f"\nSaldo: R$ {saldo:.2f}")
                    print("==========================================")
            
                elif opcao == "q":
                    break
            
                else:
                    print("Operação inválida, por favor selecione novamente a operação desejada.")

        </code>
        <bizz obs='objetivos'>
            Otimização da simulação contida dentro da tag code[obs='precisa refatorar']

                objetivo geral {

                    separar as funções existentes de saque, depósito e extrato em funções.

                    criar duas funções novas, quais sejam [
                        cadastrar usuário, i.e., o cliente 
                        cadastrar conta bancária 

                    ]
                }

                objetivos específicos {
                
                    modularizar o código[
                        criar funções para as[ 

                            § operações existentes [
                                sacar (
                                    essa função recebe argumentos keyword only
                                )

                                depositar(
                                    essa função recebe argumentos positional only
                                )

                                extrato(
                                    essa função recebe argumentos[
                                        positional only para o saldo 

                                        keyword only para o extrato 
                                    ]
                                )
                            ]

                            § operações novas [
                                criar usuário, i.e., cliente do banco(
                                    § essa função armazena os usuários em uma lista 

                                    § o usuário é composto por [
                                        nome 
                                        data de nascimento 
                                        CPF [
                                            armazena apenas os numerais e remove outros caracteres 

                                            número inteiro que é único no sistema 
                                        ]
                                        endereço [
                                            string que registra [
                                                logradouro 
                                                número 
                                                bairro 
                                                cidade
                                                sigla do estado 
                                            ]
                                        ]
                                    ]
                                )

                                criar conta corrente vinculada ao usuário(
                                    § essa função armazena contas em uma lista 

                                    § a conta corrente é composta por [
                                        agência[
                                            § há apenas uma agência, qual seja: 0001

                                            § o  número da agência é armazenada como tipo  string 
                                        ]
                                        número da conta [
                                            único no sistema 
                                        ]
                                        usuário [
                                            § o usuário pode ter mais de uma conta corrente 

                                            § cada conta corrente se relaciona a  apenas um usuário 

                                            § para vincular um usuário a alguma conta corrente [
                                                filtre a lista de usuário ao buscar pelo CPF respectivo ao usuário 
                                            ]
                                        ]
                                    ]
                                )
                            ]
                        ]
                    ]
                }

        </bizz>

        <code>
            o output precisa ser um código Python
        </code>

        <view>
            exibição do código 
        </view>

        <caution>
            <caution>
                Se não souber a informação: então, responda o seguinte: 'Não sei!'
            </caution>
        </caution>
    </requirements>

    <about>
        <scope>
            Laboratório prático para exercitar a otimização da simulação de conta corrente contida dentro da tag code[obs='precisa refatorar'] 
        </scope>

        <description>
            Sistema python que otimiza o código contida dentro da tag code[obs='precisa refatorar'] para atender os objetivos informados pela tag bizz[obs='objetivos'] 
        </description>

        <role>
            Comporte-se como se fosse um software developer que é senior e conhece toda a documentação de python e a programação orientada a objetos e as boas práticas 
            <style>
                clean code
            </style>
        </role>

        <goal>
            Desenvolver um software que é clean code para otimizar um sistema bancário.
        </goal>
    </about>

</input>
